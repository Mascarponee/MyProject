import { Observable } from "rxjs";
import ServiceConnection = require("./ServiceConnection");
declare class TSService {
    private connection;
    seq: number;
    static connect(driverName: string, onReady: (service: TSService) => any): void;
    constructor(connection: ServiceConnection);
    open(file: string, fileContent?: string): void;
    projectInfo(file: string, needFileNameList: boolean): Observable<ts.server.protocol.ProjectInfo>;
    completions(file: string, line: number, offset: number): Observable<ts.server.protocol.CompletionEntry[]>;
    completionEntryDetails(file: string, line: number, offset: number, entryNames: string[]): Observable<ts.server.protocol.CompletionEntryDetails[]>;
    geterr(files: string[], delay: number): Observable<ts.server.protocol.Diagnostic[]>;
    navto(file: string, searchValue: string, maxResultCount?: number): Observable<ts.server.protocol.NavtoItem[]>;
    definition(file: string, line: number, offset: number): Observable<ts.server.protocol.FileSpan[]>;
    definitionType(file: string, line: number, offset: number): Observable<ts.server.protocol.FileSpan[]>;
    rename(file: string, line: number, offset: number, findInComments?: boolean, findInStrings?: boolean): Observable<ts.server.protocol.RenameResponseBody>;
    references(file: string, line: number, offset: number): Observable<ts.server.protocol.ReferencesResponseBody>;
    signatureHelp(file: string, line: number, offset: number): Observable<ts.server.protocol.SignatureHelpItems>;
    quickinfo(file: string, line: number, offset: number): Observable<ts.server.protocol.QuickInfoResponseBody>;
    exit(): void;
    private increase_seq();
}
export = TSService;
