"use strict";
var Subject_1 = require("rxjs/Subject");
require("es6-promise").Promise;
var ServiceConnection = (function () {
    function ServiceConnection(driver, onReady) {
        var _this = this;
        this.driver = driver;
        this.reqResponseSubjects = {};
        this.driver.connect(function () {
            var partialMessage = "";
            var expectedBodyLenght = 0;
            var headerLength = 0;
            _this.driver.setMessageHandler(function (message) {
                if (partialMessage.length === 0) {
                    //header content expected
                    var matches = message.match(/Content-Length: (\d+)\s*/);
                    expectedBodyLenght = parseInt(matches[1]);
                    headerLength = matches[0].length;
                }
                if ((message.length + partialMessage.length) == (expectedBodyLenght + headerLength)) {
                    var completeMsg = (partialMessage + message).substring(headerLength);
                    var msg = JSON.parse(completeMsg);
                    switch (msg.type) {
                        case "response": {
                            var response = msg;
                            var responseSubject = _this.reqResponseSubjects[response.request_seq];
                            if (responseSubject) {
                                if (response.success) {
                                    responseSubject.next(response.body);
                                    responseSubject.complete();
                                    delete _this.reqResponseSubjects[response.request_seq];
                                }
                                else {
                                    responseSubject.error(response.message);
                                }
                                break;
                            }
                            else {
                                console.error("not found executor for : ", completeMsg);
                            }
                        }
                        case "event": {
                            var event_1 = msg;
                            if (event_1.event === "semanticDiag") {
                                var diagEvent = event_1;
                                _this.semanticEventsSuject.next(diagEvent.body.diagnostics);
                                _this.semanticEventsSuject.complete();
                            }
                            break;
                        }
                    }
                    partialMessage = "";
                }
                else {
                    partialMessage = partialMessage + message;
                }
            });
            onReady(_this);
        });
    }
    ServiceConnection.prototype.sendRequest = function (request) {
        this.driver.send(JSON.stringify(request) + "\n");
    };
    ServiceConnection.prototype.subscribe = function (request) {
        this.semanticEventsSuject = new Subject_1.Subject();
        this.driver.send(JSON.stringify(request) + "\n");
        return this.semanticEventsSuject;
    };
    ServiceConnection.prototype.sendRequestResp = function (request) {
        var responseSubject = new Subject_1.Subject();
        this.reqResponseSubjects[request.seq] = responseSubject;
        this.driver.send(JSON.stringify(request) + "\n");
        return responseSubject.asObservable();
    };
    return ServiceConnection;
}());
module.exports = ServiceConnection;
//# sourceMappingURL=ServiceConnection.js.map