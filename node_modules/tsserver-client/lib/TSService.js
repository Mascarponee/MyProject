"use strict";
var ServiceConnection = require("./ServiceConnection");
var TSService = (function () {
    function TSService(connection) {
        this.connection = connection;
        this.seq = 0;
    }
    TSService.connect = function (driverName, onReady) {
        var driver;
        switch (driverName) {
            case "websocket": {
                var WebSocketDriver = require("./driver/WebSocketDriver");
                driver = new WebSocketDriver();
                break;
            }
        }
        var connection = new ServiceConnection(driver, function (connection) {
            var service = new TSService(connection);
            onReady(service);
        });
    };
    TSService.prototype.open = function (file, fileContent) {
        var openRequest = {
            command: "open",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                fileContent: fileContent
            }
        };
        this.connection.sendRequest(openRequest);
    };
    TSService.prototype.projectInfo = function (file, needFileNameList) {
        var projectInfoRequest = {
            command: "projectInfo",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                needFileNameList: needFileNameList
            }
        };
        return this.connection.sendRequestResp(projectInfoRequest);
    };
    TSService.prototype.completions = function (file, line, offset) {
        var completionsRequest = {
            command: "completions",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(completionsRequest);
    };
    TSService.prototype.completionEntryDetails = function (file, line, offset, entryNames) {
        var completionDetailsRequest = {
            command: "completionEntryDetails",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset,
                entryNames: entryNames
            }
        };
        return this.connection.sendRequestResp(completionDetailsRequest);
    };
    TSService.prototype.geterr = function (files, delay) {
        var geterrRequest = {
            command: "geterr",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                files: files,
                delay: delay
            }
        };
        return this.connection.subscribe(geterrRequest);
    };
    TSService.prototype.navto = function (file, searchValue, maxResultCount) {
        var navtoRequest = {
            command: "navto",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                searchValue: searchValue,
                maxResultCount: maxResultCount
            }
        };
        return this.connection.sendRequestResp(navtoRequest);
    };
    TSService.prototype.definition = function (file, line, offset) {
        var definitionRequest = {
            command: "definition",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(definitionRequest);
    };
    TSService.prototype.definitionType = function (file, line, offset) {
        var typeDefinitionRequest = {
            command: "typeDefinition",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(typeDefinitionRequest);
    };
    TSService.prototype.rename = function (file, line, offset, findInComments, findInStrings) {
        var typeDefinitionRequest = {
            command: "rename",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset,
                findInComments: findInComments,
                findInStrings: findInStrings
            }
        };
        return this.connection.sendRequestResp(typeDefinitionRequest);
    };
    TSService.prototype.references = function (file, line, offset) {
        var referencesRequest = {
            command: "references",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(referencesRequest);
    };
    TSService.prototype.signatureHelp = function (file, line, offset) {
        var signatureHelpRequest = {
            command: "signatureHelp",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(signatureHelpRequest);
    };
    TSService.prototype.quickinfo = function (file, line, offset) {
        var referencesRequest = {
            command: "quickinfo",
            type: "request",
            seq: this.increase_seq(),
            arguments: {
                file: file,
                line: line,
                offset: offset
            }
        };
        return this.connection.sendRequestResp(referencesRequest);
    };
    TSService.prototype.exit = function () {
        var exitRequest = {
            command: "exit",
            type: "request",
            seq: this.increase_seq()
        };
    };
    TSService.prototype.increase_seq = function () {
        var temp = this.seq;
        this.seq += 1;
        return temp;
    };
    return TSService;
}());
module.exports = TSService;
//# sourceMappingURL=TSService.js.map